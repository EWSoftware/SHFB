using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace TestDoc.Generics.InheritanceBug
{
    /// <summary>
    /// Fixed by the June 2010 release.
    ///
    /// <p/>This demonstrates a bug in the May 2008 release related to inherited
    /// interface members that use generics.  There appears to be a bug in
    /// ApplyVSDocModel.xsl.  The members in question do appear in the output file
    /// generated by MRefBuilder.  However, once it is ran through the document
    /// model transformation, the members are no longer there.
    /// </summary>
    [CompilerGenerated]
    class NamespaceDoc
    {
    }

    /// <summary>
    /// Base interface
    /// </summary>
    public interface MyBase {}

    /// <summary>
    /// Derived interface
    /// </summary>
    public interface DerivedObject : MyBase
    {
    }

    /// <summary>
    /// Another derived interface
    /// </summary>
    /// <typeparam name="T">Type parameter</typeparam>
    public interface IArray<T> : IEnumerable<T>
    {
        /// <summary>
        /// Contains member
        /// </summary>
        /// <param name="item">The item to find</param>
        /// <returns>True if found, false if not</returns>
        bool Contains(T item);
    }

    /// <summary>
    /// Another derived interface
    /// </summary>
    public interface MyArray : IArray<MyBase>
    {
    }

    /// <summary>
    /// With the given base classes, this interface is not handled correctly by
    /// Sandcastle.  Namely, the IArray methods (in our example Contains), are
    /// not documented as existing in the DerivedObjectsArray interface at all).
    /// </summary>
    public interface DerivedObjectArray : IArray<DerivedObject>, MyArray
    {
    }
}
