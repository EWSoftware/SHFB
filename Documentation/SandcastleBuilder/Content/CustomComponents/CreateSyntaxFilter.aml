<?xml version="1.0" encoding="utf-8"?>
<topic id="5e80d139-811c-48ed-9b52-dcd8a3f5aef3" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>Syntax generators are used to add language and usage syntax sections to each API topic for a
programming language.  They are executed in <application>BuildAssembler</application> as part of the
<codeInline>SyntaxComponent</codeInline>.  Several language and usage syntax generators are supplied with
Sandcastle by default.  This topic will walk you through the creation of a syntax generator project used to add a
new language or usage syntax section.</para>

			<autoOutline lead="none" excludeRelatedTopics="true">1</autoOutline>
		</introduction>

		<section address="DefineConfig">
			<title>Defining the Syntax Generator Configuration</title>
			<content>
				<para>The first step is to determine what items will appear in the syntax generator configuration.  The
configuration is stored as an XML fragment in the help file builder project file.  The root node is always
<codeInline>generator</codeInline>.  Define your own elements to contain the syntax generator configuration that
will be nested within the root element.  It is possible that a syntax generator will have no configurable
elements.  In that case, there is nothing to add to the default configuration.  Below is an example of a
configuration that is passed to a syntax generator.</para>

<code language="xml" title="Example Syntax Generator Configuration">
&lt;generator id="VisualBasic"&gt;
	&lt;includeLineContinuation value="false" /&gt;
&lt;/generator&gt;
</code>

			</content>
		</section>

		<section address="CreateProject">
			<title>Creating the Project</title>
			<content>
				<para>This section describes how to create and configure the syntax generator project.  It will describe
the process for a C# project but the steps should be fairly similar for a VB.NET project with a few differences
in the configuration option titles.</para>

				<procedure>
					<title>Create the Syntax Generator Project</title>
					<steps class="ordered">
						<step>
							<content>
								<para>In Visual Studio, select the <ui>New Project</ui> option.  In the <ui>New Project</ui>
dialog box, select the C# or VB.NET language, and then select the <ui>Documentation</ui> subcategory.  Select
the <ui>BuildAssembler Syntax Generator</ui> template, give it a name and click <ui>OK</ui> to create it.
Once it has been created, right click on the project and select <ui>Properties</ui>.</para>
							</content>
						</step>
						<step>
							<content>
								<para>In the <ui>Application</ui> tab, set the assembly name and default namespace as you see
fit.</para>
							</content>
						</step>
						<step>
							<content>
								<para>In the <ui>Package</ui> tab, set the NuGet package properties.</para>
							</content>
						</step>
						<step>
							<content>
								<para>On the <ui>Debug</ui> tab, do the following:</para>

								<list class="bullet">

									<listItem>
										<para>Set the <ui>Start Action</ui> to "Start external program" and enter the path to the
<localUri>BuildAssembler.exe</localUri> program.  If you installed the help file builder in the default location,
this will be <localUri>%ProgramFiles(x86)%\EWSoftware\Sandcastle Help File Builder\</localUri>.  If not,
substitute your path as appropriate.</para>
									</listItem>

									<listItem>
										<para>Set the <ui>Command line arguments</ui> property to
<command><replaceable>/config:sandcastle.config manifest.xml</replaceable></command>.</para>
									</listItem>

									<listItem>
										<para>Set the working directory to the working folder of a project that contains the build
component.  Note that you will need to perform one build of the project with the <ui>Clean intermediate files</ui>
option turned off so that you can test the build component using the temporary build files.</para>
									</listItem>
								</list>

								<alert class="tip">
									<para>Using the BuildAssembler tool as the host is easier than using Visual Studio as the
package locks the assemblies once the help file builder project has loaded them for use and you will not be able
to rebuild them.  Shutting down BuildAssembler frees the assemblies so that you can rebuild them and start a
new debugging session.</para>

									<para>In the help file builder project that you use to test your build component, set the
project's <codeInline>Component Path</codeInline> property to the folder containing your build component's
assembly.  If you have opened the project's <ui>Components</ui> property page before setting the component path,
you may need to close and reopen the project in order for it to discover your build component assembly.</para>
								</alert>
							</content>
						</step>
						<step>
							<content>
								<para>Optionally, select the <ui>Signing</ui> tab and check the "Sign the assembly" checkbox.
Select "&lt;New...&gt;" from the "Choose a strong name key file" dropdown, enter a filename, and click OK to
create the key file.  You can protect the key file with a password if you like or uncheck the option to create
one without a password.</para>
							</content>
						</step>
					</steps>
				</procedure>

				<para>You are now ready to edit the syntax generator class itself.  See the comments in the template
class for information on how to get started.  Some general information is given below.  Note that multiple build
components can reside within the same assembly.  Add new class files to the project and implement the necessary
methods as described below and as shown in the template class.</para>

				<para>The syntax generator can be derived from either
<codeInline>Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorCore</codeInline> which is a simpler
base class suitable for usage syntax generators or from
<codeInline>Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate</codeInline> which is more
suited for language syntax as it contains more methods related to language-specific elements.  A nested Managed
Extensibility Framework (MEF) factory class that describes the component, creates instances, and allows
interaction with the design tools and build engine must also be implemented.  These are described below.  Review
the code for "<codeInline>TODO:</codeInline>" comments to find sections that need attention such as setting the
syntax generator's ID, language name, the default configuration, etc.  If you followed the steps in the
<legacyBold>Creating the Project</legacyBold> section, you can run the project and debug it by setting
breakpoints in the syntax generator's code.  As noted above, set the test project's <codeInline>Component Path</codeInline>
property to the folder containing the syntax generator assembly first.  If necessary, close and reopen the test
project so that it can discover the syntax generator.</para>

			</content>
		</section>

		<section address="Metadata">
			<title>The Export Attribute Metadata</title>
			<content>
				<para>The nested factory class is a MEF component.  The <codeInline>SyntaxGeneratorExportAttribute</codeInline>
is used to define the necessary metadata that enables the help file builder to load and use the component.</para>
			</content>

			<sections>
				<section address="MetadataId">
					<title>Id</title>
					<content>
						<para>The <codeInline>Id</codeInline> parameter is required and is used to uniquely identify the
syntax generator.  Typically, the ID is the language name.</para>
					</content>
				</section>

				<section address="MetadataLangName">
					<title>Language Element Name</title>
					<content>
						<para>The <codeInline>Language Element Name</codeInline> parameter is required and is used to
uniquely identify the syntax language element generated in each topic by the component.  This value should be
valid as an XML element name.</para>

						<alert class="important">
							<para>If you change the language name, rename the matching language resource item file in the
<localUri>SyntaxContent\</localUri> folder to the same name and update the IDs of the content items in it with
the new name.  This is required to ensure that the file and its content items are matched correctly to the
syntax sections in the generated topics.</para>
						</alert>
					</content>
				</section>

				<section address="MetadataKeywordStyle">
					<title>Keyword Style Parameter</title>
					<content>
						<para>The <codeInline>Keyword Style Parameter</codeInline> parameter is required and is used to get
the keyword style parameter value used by the client side script in the topics for language specific
keyword/separator text.  This will typically be one of the following: <codeInline>cs</codeInline> (C# or
equivalent), <codeInline>vb</codeInline> (VB.NET or equivalent), <codeInline>cpp</codeInline> (C++ or
equivalent), <codeInline>fs</codeInline> (F# or equivalent).  The value <codeInline>cs</codeInline> is typically
used as a default.</para>
					</content>
				</section>

				<section address="MetadataVersion">
					<title>Version</title>
					<content>
						<para>The <codeInline>Version</codeInline> property is optional and allows you to define the build
component version displayed in the help file builder property page when the syntax generator is selected.</para>
					</content>
				</section>

				<section address="MetadataCopyright">
					<title>Copyright</title>
					<content>
						<para>The <codeInline>Copyright</codeInline> property is optional and allows you to define the syntax
generator copyright displayed in the help file builder property page when the syntax generator is selected.</para>
					</content>
				</section>

				<section address="MetadataDescription">
					<title>Description</title>
					<content>
						<para>The <codeInline>Description</codeInline> property is optional and allows you to define the
syntax generator description displayed in the help file builder property page when the syntax generator is
selected.</para>
					</content>
				</section>

				<section address="MetadataSortOrder">
					<title>SortOrder</title>
					<content>
						<para>The <codeInline>SortOrder</codeInline> property is optional and allows you to define the
sort order of the presentation style when used in conjunction with other syntax generators.  The syntax build
component will use this sort order to define the order in which the syntax sections are emitted to the topic.</para>
					</content>
				</section>

				<section address="MetadataAlternateIds">
					<title>AlternateIds</title>
					<content>
						<para>The <codeInline>AlternateIds</codeInline> property is optional and allows you to define a
comma-separated list of other language names that can be mapped to this generator.</para>
					</content>
				</section>

				<section address="MetadataIsConfigurable">
					<title>IsConfigurable</title>
					<content>
						<para>The <codeInline>IsConfigurable</codeInline> property is optional and allows you to define
whether or not the syntax generator supports interactive editing of its configuration.  If false, the default,
the syntax generator will not be configurable.  If true, the <codeInline>SyntaxComponent</codeInline>'s
configuration editor will allow modifications to the syntax generator configuration.  The
<codeInline>SyntaxComponent</codeInline> must be added to the help file builder project in order to edit the
configuration settings.</para>
					</content>
				</section>

				<section address="DefaultConfig">
					<title>DefaultConfiguration</title>
					<content>
						<para>The <codeInline>DefaultConfiguration</codeInline> property is optional and is used to specify
the default configuration for a custom syntax generator.  This information is used when the component is selected
for use and the <codeInline>SyntaxComponent</codeInline> does not contain an alternate configuration for it.  You
can use the various replacement tags as attribute values.  These will be replaced at build time with the
appropriate project values.  The default if not overridden is an empty string.</para>

					</content>
				</section>
				
			</sections>
		</section>

		<section address="FactoryClass">
			<title>The Factory Class</title>
			<content>
				<para>The factory class for a syntax generator is quite simple.  It is derived from
<codeInline>Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorFactory</codeInline> and contains the
following abstract members that must be implemented:</para>

				<list class="bullet">
					<listItem>
						<para><codeInline>ResourceItemFileLocation</codeInline> - This property is used to return the
location of the language's resource item file.  This file contains the localized string resources used for
labels, messages, etc. and allows syntax generators to be developed and deployed without having to make changes
to the presentation styles.  By default, the project contains a <localUri>SyntaxContent\</localUri> folder with a
single XML file named after the language.  These are the default resources if no language-specific resources
are defined.  To create language-specific versions of the resource files (i.e. French, German, Chinese), create
sub-folders named after the language ID (i.e. fr-FR, de-DE, ch-CN) and place a copy of the file in each language
sub-folder containing the translated resource items.</para>
						
						<alert class="important">
							<para>If you change the language name, rename the matching language resource item file in the
<localUri>SyntaxContent\</localUri> folder to the same name and update the IDs of the content items in it with
the new name.  This is required to ensure that the file and its content items are matched correctly to the
syntax sections in the generated topics.</para>
						</alert>
					</listItem>

					<listItem>
						<para><codeInline>Create</codeInline> - This is used to create an instance of the syntax generator
and return it.</para>
					</listItem>
				</list>
			</content>

		</section>

		<section address="Template">
			<title>The Syntax Generator Template Class</title>
			<content>
				<para>Syntax generators are more complex than a standard build component and contain several abstract
methods that must be overridden.  They also rely heavily on the reflection information present in each document
to produce the correct syntax.  It is recommended that you take a look at the existing syntax components to see
how they are implemented.  If one represents a language close to the one you are implementing, you can use it as
a starting point.  More information on creating syntax generators will be added at a later date.</para>
			</content>

		</section>

		<relatedTopics>
			<link xlink:href="c8258d52-6664-4e96-86cd-6f75a854a69c" />
			<link xlink:href="8dcbb69b-7a1a-4049-8e6b-2bf344efbbc9" />
		</relatedTopics>
	</developerConceptualDocument>
</topic>
