<?xml version="1.0" encoding="utf-8"?>
<topic id="a14e026e-642f-4ce6-9506-341e57cc3d1f" revisionNumber="1">
	<developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

		<introduction>
			<autoOutline lead="This topic will walk you through the creation of a plug-in project."
				excludeRelatedTopics="true">1</autoOutline>
		</introduction>

		<section address="DefineConfig">
			<title>Defining the Plug-In Configuration</title>
			<content>
				<para>The first step is to determine what items will appear in the plug-in configuration.  The
configuration is stored as an XML fragment in the help file builder project file.  The root node is always
<codeInline>configuration</codeInline>.  Define your own elements to contain the plug-in configuration that will
be nested within the root element.  When first added to a project, the configuration will be empty.  Your plug-in
should use appropriate default values as needed.  It is possible that a plug-in will have no configurable
elements.  In that case, there is nothing to add to the default configuration.  Below is an example of a
configuration that is passed to a plug-in.</para>

<code language="xml" title="Example Plug-In Configuration">
&lt;configuration deleteAfterDeploy="true"&gt;
	&lt;deploymentLocation id="help1x" location="..\..\SHFB\Deploy\Help\"&gt;
		&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;proxyCredentials useProxy="false" proxyServer=""&gt;
			&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;/proxyCredentials&gt;
	&lt;/deploymentLocation&gt;
	&lt;deploymentLocation id="help2x" location=""&gt;
		&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;proxyCredentials useProxy="false" proxyServer=""&gt;
			&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;/proxyCredentials&gt;
	&lt;/deploymentLocation&gt;
	&lt;deploymentLocation id="helpViewer" location="" renameMSHA="false"&gt;
		&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;proxyCredentials useProxy="false" proxyServer=""&gt;
			&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;/proxyCredentials&gt;
	&lt;/deploymentLocation&gt;
	&lt;deploymentLocation id="website" location="..\WebHelp\SHFB\"&gt;
		&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;proxyCredentials useProxy="false" proxyServer=""&gt;
			&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;/proxyCredentials&gt;
	&lt;/deploymentLocation&gt;
	&lt;deploymentLocation id="openXml" location=""&gt;
		&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;proxyCredentials useProxy="false" proxyServer=""&gt;
			&lt;userCredentials useDefault="true" userName="" password="" /&gt;
		&lt;/proxyCredentials&gt;
	&lt;/deploymentLocation&gt;
&lt;/configuration&gt;
</code>

			</content>
		</section>

		<section address="CreateProject">
			<title>Creating the Project</title>
			<content>
				<para>This section describes how to create and configure the build process plug-in project.  It will
describe the process for a C# project but the steps should be fairly similar for a VB.NET project with a few
differences in the configuration option titles.</para>

				<procedure>
					<title>Create the Plug-In Project</title>
					<steps class="ordered">
						<step>
							<content>
								<para>In Visual Studio, select the <ui>New Project</ui> option.  In the <ui>New Project</ui>
dialog box, select the C# or VB.NET language, and then select the <ui>Documentation</ui> subcategory.  Select
the <ui>Sandcastle Help File Builder Plug-In</ui> template, give it a name and click <ui>OK</ui> to create it.
Once it has been created, right click on the project and select <ui>Properties</ui>.</para>
							</content>
						</step>
						<step>
							<content>
								<para>In the <ui>Application</ui> tab, set the assembly name and default namespace as you see fit.</para>
							</content>
						</step>
						<step>
							<content>
								<para>In the <ui>Package</ui> tab, set the NuGet package properties.</para>
							</content>
						</step>
						<step>
							<content>
								<para>By default, the Debug project properties are set to use the standalone GUI for debugging
which will help you see if the component can be located, that the configuration form is working if you created
one for the component, and that it is working within the build as expected.  See the
<link xlink:href="d7b0528c-c75a-477b-9445-db6d2c55dbcb" /> for some special requirements when debugging
components and plug-ins.</para>

								<alert class="tip">
									<para>Using the standalone GUI as the host is easier than using Visual Studio as the package
locks the assemblies once the help file builder project has loaded them for use and you will not be able to
rebuild them.  Shutting down the standalone GUI frees the assemblies so that you can rebuild them and start a
new debugging session.</para>

									<para>In the help file builder project that you use to test your plug-in, set the project's
<codeInline>Component Path</codeInline> property to the folder containing your build component's assembly.  If
you have opened the project's <ui>Components</ui> property page before setting the component path, you may need
to close and reopen the project in order for it to discover your build component assembly.</para>
								</alert>
							</content>
						</step>
						<step>
							<content>
								<para>Optionally, select the <ui>Signing</ui> tab and check the "Sign the assembly" checkbox.
Select "&lt;New...&gt;" from the "Choose a strong name key file" dropdown, enter a filename, and click OK to
create the key file.  You can protect the key file with a password if you like or uncheck the option to create
one without a password.</para>
							</content>
						</step>
					</steps>
				</procedure>

			</content>
		</section>

		<section address="Template">
			<title>The Plug-In Template Class</title>
			<content>
				<para>You are now ready to edit the plug-in class itself.  See the comments in the template class for
information on how to get started.  Some general information is given below.  Note that multiple plug-ins can
reside within the same assembly.  Add new class files to the project and implement the necessary methods as
described below and as shown in the template class.</para>

				<para>The plug-in is derived from the
<codeEntityReference qualifyHint="true">T:SandcastleBuilder.Utils.BuildComponent.IPlugIn</codeEntityReference>
interface and consists of a few properties and methods that you must implement.  These are described below.
Review the code for "<codeInline>TODO:</codeInline>" comments to find sections that need attention such as
setting the plug-in's ID, defining the execution points, etc.  If you followed the steps in the
<legacyBold>Creating the Project</legacyBold> section, you can run the project and debug it by setting
breakpoints in the plug-in's code.  As noted above, set the test project's <codeInline>Component Path</codeInline>
property to the folder containing the plug-in assembly first.  If necessary, close and reopen the test project
so that it can discover the plug-in.</para>

			</content>
		</section>

		<section address="Metadata">
			<title>The Export Attribute Metadata</title>
			<content>
				<para>The plug-in is a Managed Extensibility Framework (MEF) component.  The
<codeEntityReference qualifyHint="false">T:SandcastleBuilder.Utils.BuildComponent.HelpFileBuilderPlugInExportAttribute</codeEntityReference>
is used to define the necessary metadata that enables the help file builder to load and use the component.</para>
			</content>

			<sections>
				<section address="MetadataId">
					<title>Id</title>
					<content>
						<para>The <codeInline>Id</codeInline> parameter is required and is used to uniquely identify the
plug-in.</para>
					</content>
				</section>

				<section address="MetadataVersion">
					<title>Version</title>
					<content>
						<para>The <codeInline>Version</codeInline> property is optional and allows you to define the plug-in
version displayed in the help file builder property page when the plug-in is selected.</para>
					</content>
				</section>

				<section address="MetadataCopyright">
					<title>Copyright</title>
					<content>
						<para>The <codeInline>Copyright</codeInline> property is optional and allows you to define the
plug-in copyright displayed in the help file builder property page when the plug-in is selected.</para>
					</content>
				</section>

				<section address="MetadataDescription">
					<title>Description</title>
					<content>
						<para>The <codeInline>Description</codeInline> property is optional and allows you to define the
plug-in description displayed in the help file builder property page when the plug-in is selected.</para>
					</content>
				</section>

				<section address="MetadataRunsInPartialBuild">
					<title>RunsInPartialBuild</title>
					<content>
						<para>The <codeInline>RunsInPartialBuild</codeInline> property is optional and allows you to define
whether or not the plug-in runs during a partial build.  Partial builds occur when generating the reflection data
for the namespace comments and API filter editor dialogs.  In such cases, the plug-in may not be needed.  If this
property returns false, the default, the plug-in is omitted which can speed up the partial build.  Set it to true
if your plug-in adds information needed for the reflection data or namespace comments.</para>
					</content>
				</section>

				<section address="MetadataIsHidden">
					<title>IsHidden</title>
					<content>
						<para>The <codeInline>IsHidden</codeInline> property is optional and allows you to define
whether or not the plug-in is hidden and does not appear on the project property page.  If false, the default,
the plug-in will appear on the property page.  If true, the property page will not list it as one that can
be added to the project.  This is useful for presentation style dependency plug-ins that have no configurable
elements and thus do not need to be manually added to the project to override settings.</para>
					</content>
				</section>
			</sections>
		</section>

		<section address="Interface">
			<title>The Plug-In Interface</title>
			<content>
				<para>The interface consists of one property and four methods.</para>
			</content>

			<sections>
				<section address="ExecutionPoints">
					<title>ExecutionPoints</title>
					<content>
						<para>The <codeInline>ExecutionPoints</codeInline> property is probably the most important member of
the interface.  It returns a collection of
<codeEntityReference qualifyHint="false">T:SandcastleBuilder.Utils.BuildComponent.ExecutionPoint</codeEntityReference>
objects that define at which steps in the build process the plug-in should be ran.  Execution points can be set
to run before and/or after a build step to supplement the default processing or they can be set to run instead of
the build step to completely suppress or replace the default processing.  See the
<codeEntityReference qualifyHint="false">T:SandcastleBuilder.Utils.BuildEngine.BuildStep</codeEntityReference>
enumeration for a list of the defined build steps.</para>

						<para>Each execution point can be assigned a priority.  The execution priority is used to determine
the order in which the plug-ins will be executed.  Those with a higher priority value will be executed before
those with a lower value.  Those with an identical priority may be executed in any order within their group.  If
not specified, a default priority of 1,000 is used.</para>

					</content>
				</section>

				<section address="Initialize">
					<title>Initialize</title>
					<content>
						<para>The <codeInline>Initialize</codeInline> method is used to initialize the plug-in at the start
of the build process.  It is passed a reference to the current
<codeEntityReference qualifyHint="false">T:SandcastleBuilder.Utils.BuildEngine.BuildProcess</codeEntityReference>
and an XPath navigator containing the plug-in configuration.  You should cache a copy of the build process
reference for use during execution as it contains many properties and methods that you will find useful.</para>

					</content>
				</section>

				<section address="Execute">
					<title>Execute</title>
					<content>
						<para>The <codeInline>Execute</codeInline> method is called to perform the plug-in processing during
the relevant build steps.  It is passed an
<codeEntityReference qualifyHint="true">T:SandcastleBuilder.Utils.BuildComponent.ExecutionContext</codeEntityReference>
object that defines the current execution context.  If your plug-in determines that it does not need to run, it
should set the <codeEntityReference qualifyHint="true">P:SandcastleBuilder.Utils.BuildComponent.ExecutionContext.Executed</codeEntityReference>
property to false.  This is especially important for plug-ins with the <codeInline>InsteadOf</codeInline>
behavior. If none run, the default processing will occur.</para>

					</content>
				</section>

				<section address="Dispose">
					<title>Finalizer and Dispose</title>
					<content>
						<para>The <codeInline>Dispose</codeInline> method can be used to dispose of any resources used during
the build process.  If you do not have any resources that need to be disposed of, this method can be left as
it is and the finalizer method can be removed.</para>

					</content>
				</section>

			</sections>

		</section>

		<section address="ExecNotes">
			<title>Execution Notes</title>
			<content>
				<para>There are certain conditions to be aware of when choosing and coding the execution behavior for
your plug-in.</para>

				<list class="bullet">
					<listItem>
						<para>The earliest execution point for a plug-in is the <codeInline>After</codeInline> behavior with
the <codeInline>Initializing</codeInline> step.</para>
					</listItem>

					<listItem>
						<para>The <codeInline>Before</codeInline> behavior cannot be used with the <codeInline>Initializing</codeInline>,
<codeInline>Canceled</codeInline>, or <codeInline>Failed</codeInline> steps.</para>
					</listItem>

					<listItem>
						<para>The <codeInline>InsteadOf</codeInline> behavior cannot be used with the <codeInline>Initializing</codeInline>,
<codeInline>Completed</codeInline>, <codeInline>Canceled</codeInline>, or <codeInline>Failed</codeInline> steps.</para>
					</listItem>

					<listItem>
						<para>The <codeInline>InsteadOf</codeInline> behavior always takes precedence.  The build process
will not call any plug-ins with <codeInline>Before</codeInline> or <codeInline>After</codeInline> behavior for
the step if an <codeInline>InsteadOf</codeInline> plug-in runs.  As such, it is up to the plug-in with the
<codeInline>InsteadOf</codeInline> behavior to call the
<codeEntityReference qualifyHint="false" autoUpgrade="true">M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ExecuteBeforeStepPlugIns</codeEntityReference>
and <codeEntityReference qualifyHint="false" autoUpgrade="true">M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ExecuteAfterStepPlugIns</codeEntityReference>
methods to run them if needed.
						</para>
					</listItem>

					<listItem>
						<para>If the build step involves creating, modifying, or deleting a non-script file or folder, the
<codeInline>Before</codeInline> behavior is always executed prior to creating/modifying/deleting the file or
folder.  Use the <codeInline>After</codeInline> behavior if you need to guarantee that the file or folder exists
or you do not want your version overwritten.  The exceptions to this rule are MSBuild project files
(<localUri>*.proj</localUri>) and <localUri>MRefBuilder.config</localUri> which are always created prior to
running the <codeInline>Before</codeInline> behavior plug-ins.  This allows you to modify the script files prior
to them being ran.</para>
					</listItem>

					<listItem>
						<para>If the build step involves creating, modifying, or deleting a script file or folder and the
<codeInline>InsteadOf</codeInline> behavior is used, the plug-in is responsible for creating the script
file/folder.  All normal processing involving the file/folder including its creation is skipped.</para>
					</listItem>

					<listItem>
						<para>The <codeInline>GenerateHelpFormatTableOfContents</codeInline>,
<codeInline>GenerateHelpFileIndex</codeInline>, <codeInline>GenerateHelpProject</codeInline>,
<codeInline>UpdateTableOfContents</codeInline>, and <codeInline>CompilingHelpFile</codeInline> steps will run
once for each help file format selected.  You can use the
<codeEntityReference qualifyHint="false">P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.CurrentFormat</codeEntityReference>
property to determine the current help file format being built in order to skip or alter the plug-in's processing
based on the help file format.</para>
					</listItem>

					<listItem>
						<para>Be aware that the HTML Help 1 index and table of contents files and the website table of
contents file are actually generated as part of the <codeInline>ExtractHtmlInfo</codeInline> step.  However, the
before and after plug-in behaviors for the index and table of contents steps in each of those formats will still
be executed.</para>
					</listItem>

				</list>

			</content>
		</section>

		<relatedTopics>
			<link xlink:href="c8258d52-6664-4e96-86cd-6f75a854a69c" />
			<link xlink:href="e031b14e-42f0-47e1-af4c-9fed2b88cbc7" />
		</relatedTopics>

	</developerConceptualDocument>
</topic>
