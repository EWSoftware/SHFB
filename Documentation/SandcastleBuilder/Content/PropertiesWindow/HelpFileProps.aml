<?xml version="1.0" encoding="utf-8"?>
<topic id="1b2dff59-92cc-4578-b261-f3849f30c26c" revisionNumber="1">
	<developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

		<introduction>
			<autoOutline lead="The Help File category properties control the appearance and features of the generated help topics."
				excludeRelatedTopics="true" />

			<alert class="note">
				<para>The layout of several of these properties can be customized.  See the
<link xlink:href="c7378077-fc10-45f9-b52a-c57dda96fe8d" /> topic for information on how to change the layout of
these items.  Substitution tags such as <codeInline>{@BuildDate}</codeInline> can be specified in many of these
properties and will be expanded at build time to the current project property value.  See the
<link xlink:href="69d998a7-1af5-4bf5-889b-59cd00b64000" /> topic for a list of tags that can be used.</para>
			</alert>

		</introduction>

		<section address="HelpTitle">
			<title>Help title (HelpTitle)</title>
			<content>
				<para>This property is used to set the title for the help file.  This text will appear as the title of
the help file's window.</para>

			</content>
		</section>

		<section address="HtmlHelpName">
			<title>Help file name (HtmlHelpName)</title>
			<content>
				<para>This property is used to specify the name of the resulting help file.  This name is used during the
build process for a couple of other files so be sure that you do not specify a path or an extension on this
value.  It should only specify the name part of the file.  The extension will always be <localUri>.chm</localUri>
(HTML Help 1) or <localUri>.mshc</localUri> (MS Help Viewer) and the path is controlled via the
<codeInline>Output Path</codeInline> property.</para>

				<alert class="note">
					<para>This value will also be used as the suffix for the root namespace container page ID
(<codeInline>R:Project_XXX</codeInline>) with spaces replaced by underscores.  This suffix is required to keep
the root namespace container page ID unique across all help files so that there are no duplicate IDs when
generating MS Help Viewer output.</para>
				</alert>
			</content>
		</section>

		<section address="HelpFileVersion">
			<title>Help file version (HelpFileVersion)</title>
			<content>
				<para>This property is used to specify the version number associated with the help file.  You can set it
to match the version number of the product to which the help file belongs.  The value is a string which allows you
to use custom project properties to define the value (i.e. <codeInline>{@Version}</codeInline> or
<codeInline>{@Major}.{@Minor}.{@Build}.{@Revision}</codeInline>).  The property itself can be used as a
substitution tag in other properties such as the header or footer text properties.</para>
			</content>
		</section>

		<section address="Language">
			<title>Help file language (Language)</title>
			<content>
				<para>This property allows you to specify the language to use for the compiled help file.  The default is to
use the English language resource files.  A shared content file is supplied that contains various item overrides
related to the help file builder's project properties. Currently, shared content files for the help file builder
are available for several languages.  If you specify a language for which a file does not exist, the help file
will build but you will see a warning in the build output that the selected language resources could not be found
and that it is defaulting to the US English (en-US) language files.  For more information on creating additional
language resource files, see the <link xlink:href="e2ed6222-c3ee-4c6e-b0f9-fa3c86bc3e2c" /> help topic.</para>

			</content>
		</section>

		<section address="NamingMethod">
			<title>Topic file naming method (NamingMethod)</title>
			<content>
				<para>This property allows you to specify how the help topic filenames will be generated.  There are three
options:</para>

				<list class="bullet">
					<listItem>
						<para><codeInline>GUID</codeInline> will generate an MD5 hash of the topic ID and format it as a GUID
value.  The topic ID is the member name from the XML comments file for the item and includes all parameter values
for methods.  This is the default value and is suitable for most help files.  While this guarantees unique topic
filenames, it does make it cumbersome to link to help topics from external sources such as application code or
web pages that are not part of the help file's additional content as the names are rather long and
non-intuitive.</para>
					</listItem>

					<listItem>
						<para><codeInline>Member Name</codeInline> will name each help topic after the member that it represents.
To avoid problems with invalid filename characters, " " (space), ":", ".", "`" (0x60), "#", "*", and "?"
characters are replaced with an underscore in the member names.  Overloaded methods will generate duplicate
names.  To avoid this problem, all subsequent duplicate names will have a counter added to the end of their name
separated by an underscore (i.e. <codeInline>M_Type_Method</codeInline>, <codeInline>M_Type_Method_1</codeInline>,
<codeInline>M_Type_Method_2</codeInline>, etc).  When this occurs, a message is recorded in the log file.  Also
note that this may generate extremely long filenames when the full path is included.  This may cause the build to
fail. If so, try using the next option.</para>
					</listItem>

					<listItem>
						<para><codeInline>Hashed Member Name</codeInline> will name each topic using the hash value of the member
name in hex format.  This results in a much shorter filename, even shorter than the GUID names, but it can still
be easily reproduced by an application or ASP.NET web page in order to link to the help topic.  The actual member
name is used without any of the character replacements noted for the <codeInline>Member Name</codeInline> option.
As with the <codeInline>Member Name</codeInline> option, overloaded methods will generate duplicate names.  To
avoid this problem, all subsequent duplicate names will have a counter added to the end of their name separated
by an underscore (i.e. <codeInline>M:Type.Method</codeInline>, <codeInline>M:Type.Method_1</codeInline>,
<codeInline>M:Type.Method_2</codeInline>, etc.).  When this occurs, a message is recorded in the log file.</para>
					</listItem>

				</list>

				<para>Note that each help topic ID will have a prefix denoting what it represents:</para>

				<list class="bullet">
					<listItem>
						<para><codeInline>R:</codeInline> represents the root namespace page.  There will always be a single
entry named <codeInline>R:Project_[HtmlHelpName]</codeInline> where "<codeInline>[HtmlHelpName]</codeInline>" is
the value of your project's <codeInline>Html Help Name</codeInline> property with spaces replaced by underscores.
This suffix is required to keep the root namespace container page ID unique across all help files so that there
are no duplicate IDs when generating MS Help Viewer output.</para>
					</listItem>

					<listItem>
						<para><codeInline>N:</codeInline> represents a namespace help topic that lists all of the members of the
given namespace.</para>
					</listItem>

					<listItem>
						<para><codeInline>T:</codeInline> represents a type help topic that lists all of the members of the given
type.</para>
					</listItem>

					<listItem>
						<para><codeInline>Overload:</codeInline> represents a help topic that lists all of the overloads for a
particular class member.</para>
					</listItem>

					<listItem>
						<para><codeInline>F:</codeInline> represents a field member.</para>
					</listItem>

					<listItem>
						<para><codeInline>E:</codeInline> represents an event member.</para>
					</listItem>

					<listItem>
						<para><codeInline>P:</codeInline> represents a property.</para>
					</listItem>

					<listItem>
						<para><codeInline>M:</codeInline> represents a method.</para>
					</listItem>
				</list>

				<para>Below are some examples of the member names and their equivalent filenames.  The values in the
first column would be used for the <codeInline>Hashed Member Name</codeInline> option to create the hash value.
The second column would be used for the <codeInline>Member Name</codeInline> option.  For GUID filenames, the
method names in the first column would include parameter information rather than a numeric suffix.</para>

				<table>
					<tableHeader>
						<row>
							<entry>
								<para>HashedMemberName (value to hash)</para>
							</entry>
							<entry>
								<para>MemberName</para>
							</entry>
						</row>
					</tableHeader>
					<row>
						<entry>
							<para>R:Project_HtmlHelpName</para>
						</entry>
						<entry>
							<para>R_Project_HtmlHelpName (where "HtmlHelpName" is the value of your project's
<codeInline>Html Help Name</codeInline> property value with spaces replaced by underscores.
							</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>N:SandcastleBuilder.Utils</para>
						</entry>
						<entry>
							<para>N_SandcastleBuilder_Utils</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>T:SandcastleBuilder.Utils.BuildProcess</para>
						</entry>
						<entry>
							<para>T_SandcastleBuilder_Utils_BuildProcess</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>Overload:SandcastleBuilder.Utils.BuilderException.#ctor</para>
						</entry>
						<entry>
							<para>Overload_SandcastleBuilder_Utils_BuilderException__ctor</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>F:SandcastleBuilder.Utils.SandcastleProject.DefaultName</para>
						</entry>
						<entry>
							<para>F_SandcastleBuilder_Utils_SandcastleProject_DefaultName</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>E:SandcastleBuilder.Utils.BuildProcess.BuildStepChanged</para>
						</entry>
						<entry>
							<para>E_SandcastleBuilder_Utils_BuildProcess_BuildStepChanged</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>P:SandcastleBuilder.Utils.DependencyItem.DependencyPath</para>
						</entry>
						<entry>
							<para>P_SandcastleBuilder_Utils_DependencyItem_DependencyPath</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>M:SandcastleBuilder.Utils.BuilderException.#ctor</para>
							<para>M:SandcastleBuilder.Utils.BuilderException.#ctor_1 (overload #1)</para>
							<para>M:SandcastleBuilder.Utils.BuilderException.#ctor_2 (overload #2)</para>
							<para>M:SandcastleBuilder.Utils.BuilderException.#ctor_3 (overload #3)</para>
						</entry>
						<entry>
							<para>
								M_SandcastleBuilder_Utils_BuilderException__ctor (note the double underscore before "ctor" due to
								the "#")
							</para>
							<para>M_SandcastleBuilder_Utils_BuilderException__ctor_1 (overload #1)</para>
							<para>M_SandcastleBuilder_Utils_BuilderException__ctor_2 (overload #2)</para>
							<para>M_SandcastleBuilder_Utils_BuilderException__ctor_3 (overload #3)</para>
						</entry>
					</row>
				</table>

				<para>To map a member name to its equivalent filename, you can use code similar to the following.  As
noted in the code, the HTML files will reside in an <localUri>html\</localUri> folder and will have a
<localUri>.htm</localUri> extension so be sure to add them to the resulting topic filename.</para>

				<para>
					<legacyBold>GUID Method</legacyBold>
				</para>

				<code language="cs">
// Compute the MD5 hash of the member name.  Assume
// memberName contains the member name of the topic
// to show.
HashAlgorithm md5 = HashAlgorithm.Create("MD5");

byte[] input = Encoding.UTF8.GetBytes(memberName);
byte[] output = md5.ComputeHash(input);

// Format it as a GUID value
Guid pageId = new Guid(output);

// Show the topic in the help file.  Remember to add
// the "html\" folder name and the ".htm" extension.
Help.ShowHelp(parentForm, helpFilePath,
HelpNavigator.Topic, @"html\" + pageId.ToString() + ".htm");
</code>

<code language="vbnet">
' Compute the MD5 hash of the member name.  Assume
' memberName contains the member name of the topic
' to show.
Dim md5 As New HashAlgorithm.Create("MD5")

Dim inputArray() As Byte() = Encoding.UTF8.GetBytes(memberName)
Dim outputArray() As Byte() = md5.ComputeHash(inputArray)

' Format it as a GUID value
Dim pageId As New Guid(outputArray)

' Show the topic in the help file.  Remember to add
' the "html\" folder name and the ".htm" extension.
Help.ShowHelp(parentForm, helpFilePath, _
HelpNavigator.Topic, "html\" &amp; pageId.ToString() &amp; ".htm")
				</code>

				<para>
					<legacyBold>Member Name Method</legacyBold>
				</para>

				<code language="cs">
Regex reInvalidChars = new Regex("[ :.`#&lt;&gt;*?]");

// Assume memberName contains the member name of the
// topic to show.
string pageName = reInvalidChars.Replace(
memberName, "_");

// Show the topic in the help file.  Remember to add
// the "html\" folder name and the ".htm" extension.
Help.ShowHelp(parentForm, helpFilePath,
HelpNavigator.Topic, @"html\" + pageName + ".htm");
				</code>

				<code language="vbnet">
Dim reInvalidChars As New Regex("[ :.`#&lt;&gt;*?]")

' Assume memberName contains the member name of the
' topic to show.
Dim pageName As String = reInvalidChars.Replace( _
memberName, "_")

' Show the topic in the help file.  Remember to add
' the "html\" folder name and the ".htm" extension.
Help.ShowHelp(parentForm, helpFilePath, _
HelpNavigator.Topic, "html\" &amp; pageName &amp; ".htm")
				</code>

				<para>
					<legacyBold>Hashed Member Name Method</legacyBold>
				</para>

				<code language="cs">
// Assume memberName contains the member name of the
// topic to show.
string pageName = String.Format("{0:X}",
memberName.GetHashCode());

// Show the topic in the help file.  Remember to add
// the "html\" folder name and the ".htm" extension.
Help.ShowHelp(parentForm, helpFilePath,
HelpNavigator.Topic, @"html\" + pageName + ".htm");
				</code>

				<code language="vbnet">
' Assume memberName contains the member name of the
' topic to show.
Dim pageName As String = String.Format("{0:X}", _
memberName.GetHashCode())

' Show the topic in the help file.  Remember to add
' the "html\" folder name and the ".htm" extension.
Help.ShowHelp(parentForm, helpFilePath, _
HelpNavigator.Topic, "html\" &amp; pageName &amp; ".htm")
				</code>

				<para>The naming rules are the same for pages generated for the website output.  If using a newer
presentation style such as the Default2022 style, the URLs to the topics are direct.  Simply bring up the site
and navigate to the page you want to link to.  The URL to the page will appear in the browser's address bar.  Here
is an example:</para>

				<code language="none" title=" ">
					https://ewsoftware.github.io/SHFB/html/1aea789d-b226-4b39-b534-4c97c256fac8.htm
				</code>

				<para>If using an older presentation style that uses the frame-based index page, the URL must use a query
string to specify the topic to display.  One way to get the URL to use for a page in the old-style website output
is to bring up the Index page for the generated website (<localUri>Index.html</localUri> or
<localUri>Index.aspx</localUri>).  You can click on the links in the navigation pane to display the topics and
click the <ui>Direct Link</ui> option at the top of the index pane to show the direct link URL in a message box.
Copy and paste that link into your web page.  That will bring up the index page and show the selected topic as
the default page in the right-hand pane.  You can replace <localUri>Index.aspx</localUri> with one of the other
index pages such as the HTML or PHP version.  Here is an example link:</para>

				<code language="none" title=" ">
					https://ewsoftware.github.io/SHFB/Index.aspx?topic=html/1aea789d-b226-4b39-b534-4c97c256fac8.htm
				</code>

				<alert class="tip">
					<para>Conceptual content topic files are always named using their GUID as the filename with a ".htm"
extension and they are always placed in the <localUri>html/</localUri> folder.
					</para>
				</alert>

			</content>
		</section>

		<section address="ContentPlacement">
			<title>Conceptual content placement (ContentPlacement)</title>
			<content>
				<para>This property allows you to define where the additional and/or conceptual content items appear in
the table of contents.  By default, they will appear above the namespaces.  By setting this property to
<codeInline>Below namespaces</codeInline>, you can make the items appear below the namespace entries in the table
of contents.</para>

				<para>This property's setting will be ignored if a
<link xlink:href="3dd5fe3b-1bc3-42e5-8900-56165e3f9aed">site map</link> is defined that specifies a split table
of contents, or <link xlink:href="54e3dc97-5125-441e-8e84-7f9303e95f26">conceptual content</link> is defined with
an entry marked as the split location.  In such cases, items prior to the entry with the "split" option will
appear before the API content. The item with the "split" option and all items after it will appear below the API
content.  See the <link xlink:href="ba42b2c2-985d-46f1-ba4c-3d921edcafe3" /> topic for more information.</para>
			</content>
		</section>

		<section address="RootNS">
			<title>Include root namespace container/Title (RootNamespaceContainer) and (RootNamespaceTitle)</title>
			<content>
				<para>The <codeInline>Root Namespace Container</codeInline> property is used to specify whether or not a
root namespace entry is added to the table of contents to act as a container for the namespaces from the
documented assemblies.  If set to True, a root <legacyBold>Namespaces</legacyBold> table of contents entry will
be created as the container of the namespaces in the documented assemblies.  If set to False, the default, the
namespaces are listed in the table of contents as root entries.  To change the name of the root container from
"Namespaces", enter the new name in the <codeInline>Root Namespace Title</codeInline> property.</para>

			</content>
		</section>

		<section address="NSGrouping">
			<title>Enable namespace grouping if supported (NamespaceGrouping) and Maximum group parts (MaximumGroupParts)</title>
			<content>
				<para>If enabled, the <codeInline>NamespaceGrouping</codeInline> option will cause namespaces with a
common number of root parts (specified by <codeInline>MaximumGroupParts</codeInline>) to be consolidated under
a common group topic in the table of contents.  Increasing the number of maximum parts to consider will create
more subgroups below the main groups as needed.  Consider the following namespaces each of which contains at
least one type:</para>

				<list class="bullet">
					<listItem>
						<para>MyCompany.MyProduct</para>
					</listItem>
					<listItem>
						<para>MyCompany.MyProduct.Web.Controls</para>
					</listItem>
					<listItem>
						<para>MyCompany.MyProduct.Web.Design</para>
					</listItem>
					<listItem>
						<para>MyCompany.MyProduct.Windows.Forms</para>
					</listItem>
				</list>

				<para>If left at the default maximum group setting of two, a group container for
<codeInline>MyCompany.MyProduct</codeInline> would be created with child entries for each of the namespaces
including its namesake because it contains types.  If the maximum is increased to three, a new subgroup would be
created below it for <codeInline>MyCompany.MyProduct.Web</codeInline> to contain the controls and design
namespaces beneath it.  Since no types appear in the group's namesake a child entry is not added for it.</para>

				<para>The group topics are similar in nature to namespace topics in that you can add comments to them
using the <ui>Namespace Summaries</ui> option in the <ui>Summaries</ui> project property category or use a
<codeInline>NamespaceGroupDoc</codeInline> class to manage the comments in the source code.</para>

				<para>Be aware that namespaces without any types may not result in a group topic.  This is done to
prevent group entries that contain a single topic that is itself a group.  In the example above, if the
<codeInline>MyCompany.MyProduct</codeInline> namespace contained no types, a group would not be created and all
topics would be listed at the root level.  In such cases, if you still want a root container topic, enable the
Root Namespace Container project option and place any comments for the group in the Project Summary project
option.  In a similar fashion, if the Root Namespace Container option is enabled and a root group is created as
in the above example, it is removed and its content is listed in the root namespace container topic to prevent a
single group entry from appearing by itself below the root namespace container.</para>

			</content>
		</section>

		<section address="Preliminary">
			<title>Include "preliminary documentation" warning (Preliminary)</title>
			<content>
				<para>When this property is set to True, it will mark all topics in the help file with a large, red
message "[This is preliminary documentation and is subject to change.]".  This is a quick and easy way to mark
documentation for beta software as preliminary and subject to change.</para>

				<alert class="tip">
					<para>Individual API members can be marked as preliminary using the <codeInline>&lt;preliminary /&gt;</codeInline>
XML comments tag.  If no inner text is specified, a default message is used.  A custom message can be displayed
by adding inner text to the tag.</para>
				</alert>

			</content>
		</section>

		<section address="HeaderText">
			<title>Additional header content (HeaderText)</title>
			<content>
				<para>This property can be used to insert an extra message in the header of each page.  By default, it is
blank.  HTML tags are supported within the text.  See the <codeInline>Preliminary</codeInline> property for a way
to mark all topics as preliminary.</para>

			</content>
		</section>

		<section address="FooterText">
			<title>Additional footer content (FooterText)</title>
			<content>
				<para>This property can be used to insert an extra message in the footer of each page.  By default, it is
blank.  HTML tags are supported within the text.</para>

			</content>
		</section>

		<section address="CopyrightProps">
			<title>Copyright notice URL/Notice text (CopyrightHref) and (CopyrightText)</title>
			<content>
				<para>These two properties can be used individually or in combination.  If only
<codeInline>Copyright Href</codeInline> is specified, a link will appear in the footer of each page for the
specified URL.  If only the <codeInline>Copyright Text</codeInline> property is specified, that message appears in
the footer of each page. If both are specified, a link appears in the footer of each page using the text from the
<codeInline>Copyright Text</codeInline> property and the target of the link is set to the URL specified in the
<codeInline>Copyright Href</codeInline> property.  The value of the <codeInline>Copyright Text</codeInline>
property is treated as plain text. It will be HTML encoded where necessary to resolve issues related to the
ampersand character and the XML parser.  In addition, you can encode special characters such as the copyright
symbol using an escaped hex value (i.e. &#169; = \xA9).</para>

			</content>
		</section>

		<section address="FeedbackEMailAddress">
			<title>Feedback e-mail address/E-mail link text (FeedbackEMailAddress) and (FeedbackEMailLinkText)</title>
			<content>
				<para>If an e-mail address is specified in the <codeInline>Feedback E-Mail Address</codeInline> property,
an extra message is included in the footer of each page with a message saying "Send comments on this topic to"
plus the specified e-mail address or link text.  If a <codeInline>Feedback E-Mail Link Text</codeInline> value is
specified along with a feedback e-mail address, that text will be displayed as the link text rather than the
e-mail address.  If left blank, the e-mail address will be used.  The e-mail address is rendered as a clickable
<codeInline>mailto:</codeInline> link and the subject of the e-mail will be set to the title of the help file
plus the title of the page in which the link appears.</para>

			</content>
		</section>

		<section address="SdkLinkTarget">
			<title>SDK link target (SdkLinkTarget)</title>
			<content>
				<para>When an SDK link type property is set to <codeInline>MSDN</codeInline>, the
<codeInline>SDK Link Target</codeInline> property is used to define where the external links will open in the
browser.  This property has no effect if the SDK link type property for a particular help file format is set to
any other value.  The default value is <codeInline>Blank</codeInline> to open external links in a new window.  It
can also be set to <codeInline>Self</codeInline>, <codeInline>Parent</codeInline>, or <codeInline>Top</codeInline>
which have the same effect of replacing the current window's content with the content of the target topic.  The
last two are useful when producing web output as they will cause the external links to replace the frame set with
the target topic page.</para>

			</content>
		</section>

		<relatedTopics>
			<link xlink:href="e32086c6-de17-4e54-a746-1ac80bf0c45a" />
		</relatedTopics>

	</developerConceptualDocument>
</topic>
