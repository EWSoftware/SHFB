<configuration>
	<dduetools>
		<builder>
			<components>

				<!-- Create skeleton document -->
				<component id="Copy From File Component">
					<data file="%SHFBROOT%\PresentationStyles\Vs2005\transforms\skeleton_conceptual.xml" />
					<copy source="/*" target="/" />
				</component>

				<!-- Copy in comments -->
				<component id="Copy From Index Component">
					<index name="comments" value="/topic" key="@id">
						<data files=".\DdueXml\*.xml" />
					</index>
					<copy name="comments" source="/topic" target="/document" />
				</component>

				<!-- Resolve tokens -->
				<component id="Shared Content Component">
					<context prefix="ddue" name="http://ddue.schemas.microsoft.com/authoring/2003/5" />
					<content file="%SHFBROOT%\Data\tokens.xml" />
					<replace elements="/*//ddue:token" item="string(.)" />
				</component>

				<!-- Copy in metadata keywords -->
				<component id="Copy From Files Component">
					<copy base=".\XmlComp" file="concat($key,'.cmp.xml')" source="/metadata/topic[@id=$key]/*"
						target="/document/metadata" />
				</component>

				<!-- Copy in metadata attributes -->
				<component id="Copy From Index Component">
					<index name="metadata" value="/metadata/topic" key="@id">
						<data files=".\ExtractedFiles\*.ContentMetadata.xml" />
					</index>
					<index name="version" value="/metadata/topic" key="@id">
						<data files="Version.xml" />
					</index>
					<copy name="metadata" source="*" target="/document/metadata" />
					<copy name="metadata" key="string('*')" source="*" target="/document/metadata" />
					<copy name="version" key="string('*')" source="*" target="/document/metadata" missing-target="error" />
				</component>

				<!-- Copy in metadata project settings -->
				<component id="Copy From Index Component">
					<index name="projectSettings" value="/*/item" key="@id">
						<data files=".\ExtractedFiles\*projectsettings.xml" />
					</index>
					<copy name="projectSettings" key="string('PBM_FileVersion')" source="." target="/document/metadata" />
				</component>

				<!-- Resolve code snippets -->
				<component id="Snippet Component">
					<examples>
						<example directory="d:\SnippetComponentTest\parsnip" />
					</examples>
					<!-- Each excludedUnits/unitFolder node specifies the name of a folder to exclude at the unit-level of the sample tree. 
               The unit folders are typically named "CS", "VB", etc. 
               Many example folders have "CPP_OLD" unit folders containing snippets that we do NOT want to include in the build. -->
					<excludedUnits>
						<unitFolder name="CPP_OLD" />
					</excludedUnits>
					<!-- You can specify an optional Parsnip approval log, in which case snippets are included only if they are in approved example units in the log. -->
					<!-- TFS 480671 says DO NOT USE Parsnip approval logs for DevDiv content; ALL snippets should be included, regardless of Parsnip results. -->
					<!--
	        <approvalLogs>
	          <approvalLog file="\\docbuildtask\snippet_building\Orcas\parsnip\approved-all.xml" />
	        </approvalLogs>
          -->

					<!-- language nodes specify:
                  @unit: name of the unit folders in the sample tree that contain examples in this language
                  @languageId: id for this language used in Manifold transforms, etc.
                  optional color nodes to specify rules for coloring snippets in this language
               The order of language nodes determines the order in which the snippets are displayed
          -->
					<languages>
						<language  unit="VB" languageId="VisualBasic" extension=".vb">
							<color pattern="^\s*'[^\r\n]*" class="comment" />
							<color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
							<color pattern="\b((AddHandler)|(AddressOf)|(Alias)|(And)|(AndAlso)|(As)|(Boolean)|(ByRef)|(Byte)|(ByVal)|(Call)|(Case)|(Catch)|(CBool)|(CByte)|(CChar)|(CDate)|(CDec)|(CDbl)|(Char)|(CInt)|(Class)|(CLng)|(CObj)|(Const)|(Continue)|(CSByte)|(CShort)|(CSng)|(CStr)|(CType)|(CUInt)|(CULng)|(CUShort)|(Date)|(Decimal)|(Declare)|(Default)|(Delegate)|(Dim)|(DirectCast)|(Do)|(Double)|(Each)|(Else)|(ElseIf)|(End)|(EndIf)|(Enum)|(Erase)|(Error)|(Event)|(Exit)|(False)|(Finally)|(For)|(Friend)|(From)|(Function)|(Get)|(GetType)|(GetXMLNamespace)|(Global)|(GoSub)|(GoTo)|(Handles)|(If)|(Implements)|(Imports)|(In)|(Inherits)|(Integer)|(Interface)|(Is)|(IsNot)|(Let)|(Lib)|(Like)|(Long)|(Loop)|(Me)|(Mod)|(Module)|(MustInherit)|(MustOverride)|(MyBase)|(MyClass)|(Namespace)|(Narrowing)|(New)|(Next)|(Not)|(Nothing)|(NotInheritable)|(NotOverridable)|(Object)|(Of)|(On)|(Operator)|(Option)|(Optional)|(Or)|(OrElse)|(Overloads)|(Overridable)|(Overrides)|(ParamArray)|(Partial)|(Private)|(Property)|(Protected)|(Public)|(RaiseEvent)|(ReadOnly)|(ReDim)|(REM)|(RemoveHandler)|(Resume)|(Return)|(SByte)|(Select)|(Set)|(Shadows)|(Shared)|(Short)|(Single)|(Static)|(Step)|(Stop)|(String)|(Structure)|(Sub)|(SyncLock)|(Then)|(Throw)|(To)|(True)|(Try)|(TryCast)|(TypeOf)|(Variant)|(Wend)|(UInteger)|(ULong)|(UShort)|(Until)|(Using)|(When)|(Where)|(While)|(Widening)|(With)|(WithEvents)|(WriteOnly)|(Xor)|(#Const)|(#Else)|(#ElseIf)|(#End)|(#If))\b" class="keyword" />
						</language>

						<language unit="CS" languageId="CSharp" extension=".cs">
							<color pattern="/\*(.|\n)+?\*/" class="comment" />
							<color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
							<color pattern="//[^\r\n]*" class="comment" />
							<color pattern="\b((abstract)|(as)|(ascending)|(base)|(bool)|(break)|(by)|(byte)|(case)|(catch)|(char)|(checked)|(class)|(const)|(continue)|(decimal)|(default)|(delegate)|(descending)|(do)|(double)|(else)|(enum)|(equals)|(event)|(explicit)|(extern)|(false)|(finally)|(fixed)|(float)|(for)|(foreach)|(from)|(get)|(goto)|(group)|(if)|(implicit)|(in)|(int)|(interface)|(internal)|(into)|(is)|(join)|(let)|(lock)|(long)|(namespace)|(new)|(null)|(object)|(operator)|(on)|(orderby)|(out)|(override)|(params)|(partial)|(private)|(protected)|(public)|(readonly)|(ref)|(return)|(sbyte)|(sealed)|(select)|(set)|(short)|(sizeof)|(stackalloc)|(static)|(string)|(struct)|(switch)|(this)|(throw)|(true)|(try)|(typeof)|(uint)|(ulong)|(unchecked)|(unsafe)|(ushort)|(using)|(value)|(var)|(yield)|(virtual)|(volatile)|(void)|(where)|(while))\b" class="keyword" />
						</language>

						<language unit="CPP" languageId="ManagedCPlusPlus" extension=".cpp">
							<color pattern="/\*(.|\n)+?\*/" class="comment" />
							<color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
							<color pattern="//[^\r\n]*" class="comment" />
							<color pattern="\b((abstract)|(array)|(bool)|(break)|(case)|(catch)|(char)|(class)|(const)|(continue)|(default)|(delegate)|(delete)|(deprecated)|(dllexport)|(dllimport)|(do)|(double)|(else)|(enum)|(event)|(explicit)|(extern)|(false)|(finally)|(float)|(for)|(friend)|(gcnew)|(generic)|(goto)|(if)|(initonly)|(inline)|(int)|(interface)|(literal)|(long)|(mutable)|(naked)|(namespace)|(new)|(noinline)|(noreturn)|(nothrow)|(novtable)|(nullptr)|(operator)|(private)|(property)|(protected)|(public)|(ref)|(register)|(return)|(safecast)|(sealed)|(selectany)|(short)|(signed)|(sizeof)|(static)|(struct)|(switch)|(template)|(this)|(thread)|(throw)|(true)|(try)|(typedef)|(typeid)|(typename)|(union)|(unsigned)|(using)|(uuid)|(value)|(virtual)|(void)|(volatile)|(while))\b" class="keyword" />
						</language>

						<language unit="FS" languageId="FSharp" extension=".fs">
							<color pattern="\(\*(.|\n)+?\*\)" class="comment" />"
							<color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
							<color pattern="//[^\r\n]*" class="comment" />
							<color pattern="\b((abstract)|(and)|(as)|(asr)|(assert)|(atomic)|(base)|(begin)|(break)|(checked)|(class)|(component)|(const)|(constraint)|(constructor)|(continue)|(default)|(delegate)|(do)|(done)|(downcast)|(downto)|(eager)|(elif)|(else)|(end)|(event)|(exception)|(extern)|(external)|(false)|(finally)|(fixed)|(for)|(fun)|(function)|(functor)|(global)|(if)|(in)|(include)|(inherit)|(inline)|(interface)|(internal)|(land)|(lazy)|(let)|(lor)|(lsl)|(lsr)|(lxor)|(match)|(member)|(method)|(mixin)|(mod)|(module)|(mutable)|(namespace)|(new)|(null)|(object)|(of)|(open)|(or)|(override)|(parallel)|(private)|(process)|(protected)|(public)|(pure)|(rec)|(return)|(sealed)|(sig)|(static)|(struct)|(tailcall)|(then)|(to)|(trait)|(true)|(try)|(type)|(upcast)|(use)|(val)|(virtual)|(void)|(volatile)|(when)|(while)|(with)|(yield))\b" class="keyword" />
						</language>

						<language unit="JS" languageId="JScript" />
						<language unit="JSL" languageId="JSharp" />
						<language unit="Common" languageId="None" />
						<language unit="XAML" languageId="XAML" />
					</languages>

				</component>

				<!-- Copy in topicTypes -->
				<component id="For Each Component">
					<context prefix="ddue" name="http://ddue.schemas.microsoft.com/authoring/2003/5" />
					<context prefix="xlink" name="http://www.w3.org/1999/xlink" />
					<variable expression="/document/topic/*/ddue:relatedTopics/*/@xlink:href" />
					<components>
						<component id="Copy From Index Component">
							<context prefix="ddue" name="http://ddue.schemas.microsoft.com/authoring/2003/5" />
							<context prefix="xlink" name="http://www.w3.org/1999/xlink" />
							<index name="topicType" value="/metadata/topic" key="@id">
								<data base="%SHFBROOT%\Data\ContentMetadata" recurse="true" files="*.contentmetadata.xml" />
							</index>
							<copy name="topicType" source="topicType"
								target="/document/topic/*/ddue:relatedTopics/*[@xlink:href='{0}' and not(@topicType_id)]"
								attribute="true" ignoreCase="true" missing-target="error" />
						</component>
					</components>
				</component>

				<!-- Transform -->
				<component id="XSL Transform Component">
					<transform file="%SHFBROOT%\PresentationStyles\Vs2005\transforms\main_conceptual.xsl">
						<argument key="metadata" value="true" />
						<argument key="languages">
							<language name="CSharp" style="cs" />
							<language name="VisualBasic" style="vb" />
							<language name="ManagedCPlusPlus" style="cpp" />
						</argument>
						<!-- You can use the optional changeHistoryOptions argument to control display of freshness date and Change History sections.
               If value='showDefaultFreshnessDate', all topics have a freshness date; default date is from 'defaultFreshnessDate' shared content item.
               if value='omit', freshness date and Change History sections are omitted from all topics.
               <argument key="changeHistoryOptions" value="omit" /> 
            -->
					</transform>
				</component>

				<!-- Resolve art links -->
				<component id="Resolve Art Links Component">
					<targets input="%SHFBROOT%\Data\ArtStore" baseOutput=".\Output" outputPath="string('media')"
						link="../media" map="%SHFBROOT%\Data\ArtSharedContent.loc.xml" />
				</component>

				<!-- Resolve shared content -->
				<component id="Shared Content Component">
					<content file="%SHFBROOT%\PresentationStyles\Vs2005\content\shared_content.xml" />
					<content file="%SHFBROOT%\PresentationStyles\VS2005\content\feedBack_content.xml" />
					<content file="%SHFBROOT%\PresentationStyles\Vs2005\content\conceptual_content.xml" />
				</component>

				<!-- Resolve conceptual links -->
				<component id="Resolve Conceptual Links Component">
					<targets base=".\XmlComp" type="local" />
					<targets base="%SHFBROOT%\Data\XmlComp" type="index"/>
				</component>

				<!-- Resolve reference links -->
				<component id="Resolve Reference Links Component">
					<targets base="%SHFBROOT%\Data\.NETFramework\" recurse="true"  files="*.xml" type="index" />
				</component>

				<!-- Save the result -->
				<component id="Save Component">
					<save base=".\Output\html" path="concat($key,'.htm')" link="../html" indent="true"
						omit-xml-declaration="true" outputMethod="html" />
				</component>

				<!-- Record file creation events -->
				<component id="HxF File Generator Component" input="%SHFBROOT%\PresentationStyles\vs2005\seed.HxF"
					output="test.HxF" />

			</components>
		</builder>
	</dduetools>
</configuration>
