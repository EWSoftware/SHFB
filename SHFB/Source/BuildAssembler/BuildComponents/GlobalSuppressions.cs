// This file is used by Code Analysis to maintain SuppressMessage
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given
// a specific target and scoped to a namespace, type, member, etc.

using System.Diagnostics.CodeAnalysis;

[assembly: SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Commands.CopyFromIndexCommand.Apply(System.Xml.XmlDocument,System.Xml.IXmlNamespaceResolver)")]
[assembly: SuppressMessage("Reliability", "CA2000:Dispose objects before losing scope", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Commands.IndexedCache.LoadXmlCommentsFile(System.String)~System.Xml.XPath.XPathDocument")]
[assembly: SuppressMessage("Design", "CA1002:Do not expose generic lists", Justification = "<Pending>", Scope = "member", Target = "~P:Sandcastle.Tools.BuildComponents.Snippets.CodeSnippetGroup.CodeSnippets")]
[assembly: SuppressMessage("Performance", "CA1815:Override equals and operator equals on value types", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.Snippets.Region")]
[assembly: SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Snippets.SnippetIdentifier.#ctor(System.String)")]
[assembly: SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Snippets.SnippetIdentifier.#ctor(System.String,System.String)")]
[assembly: SuppressMessage("Performance", "CA1815:Override equals and operator equals on value types", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.Snippets.SnippetIdentifier")]
[assembly: SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Targets.ConceptualLinkInfo.#ctor(System.Xml.XPath.XPathNavigator)")]
[assembly: SuppressMessage("Usage", "CA2235:Mark all non-serializable fields", Justification = "<Pending>", Scope = "member", Target = "~P:Sandcastle.Tools.BuildComponents.Targets.TargetDictionary.BuildComponent")]
[assembly: SuppressMessage("Design", "CA1054:URI-like parameters should not be strings", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Targets.TargetInfo.#ctor(System.String,System.String,Sandcastle.Tools.BuildComponents.Targets.ConceptualLinkType)")]
[assembly: SuppressMessage("Maintainability", "CA1508:Avoid dead conditional code", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Targets.TextReferenceUtilities.CreateReference(System.String)~Sandcastle.Tools.BuildComponents.Targets.Reference")]
[assembly: SuppressMessage("Maintainability", "CA1508:Avoid dead conditional code", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Targets.TextReferenceUtilities.SetGenericContext(System.String)")]
[assembly: SuppressMessage("Performance", "CA1810:Initialize reference type static fields inline", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Targets.TextReferenceUtilities.#cctor")]
[assembly: SuppressMessage("Maintainability", "CA1508:Avoid dead conditional code", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Targets.TextReferenceUtilities.WriteSimpleMemberReference(Sandcastle.Tools.BuildComponents.Targets.SimpleMemberReference,Sandcastle.Tools.BuildComponents.Targets.DisplayOptions,System.Xml.XmlWriter,Sandcastle.Tools.BuildComponents.Targets.LinkTextResolver)")]
[assembly: SuppressMessage("Maintainability", "CA1508:Avoid dead conditional code", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Targets.XmlTargetDictionaryUtilities.EnumerateTargets(System.Xml.XPath.XPathNavigator)~System.Collections.Generic.IEnumerable{Sandcastle.Tools.BuildComponents.Targets.Target}")]
[assembly: SuppressMessage("Maintainability", "CA1508:Avoid dead conditional code", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.Targets.XmlTargetDictionaryUtilities.CreateTarget(System.Xml.XPath.XPathNavigator)~Sandcastle.Tools.BuildComponents.Targets.Target")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.AdditionalHeaderResourcesComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.CloneComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.CopyFromFileComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.CopyFromFilesComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.CopyFromIndexComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.CopyFromIndexComponent.Initialize(System.Xml.XPath.XPathNavigator)")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.ExampleComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.ForEachComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.IfThenComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.IntelliSenseComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.LanguageSpecificTextComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.MSHCComponent.Factory")]
[assembly: SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.MSHCComponent.Apply(System.Xml.XmlDocument,System.String)")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.ResolveArtLinksComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.ResolveConceptualLinksComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.ResolveReferenceLinksComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.ResolveReferenceLinksComponent.CreateTargetDictionary(System.Xml.XPath.XPathNavigator)~Sandcastle.Tools.BuildComponents.Targets.TargetDictionary")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.SaveComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.SaveComponent.WriteDocuments")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.SharedContentComponent.DefaultFactory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.SharedContentComponent.ApiTokenResolutionComponentFactory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.ShowMissingComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.ShowMissingComponent.Apply(System.Xml.XmlDocument,System.String)")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.SwitchComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.SyntaxComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.SyntaxComponent.Initialize(System.Xml.XPath.XPathNavigator)")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.TransformComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1056:URI-like properties should not be strings", Justification = "<Pending>", Scope = "member", Target = "~P:Sandcastle.Tools.BuildComponents.Targets.TargetInfo.Url")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.CodeBlockComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:SandcastleBuilder.Components.MultiFormatOutputComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>", Scope = "type", Target = "~T:Sandcastle.Tools.BuildComponents.TransformDocumentDumpComponent.Factory")]
[assembly: SuppressMessage("Design", "CA1002:Do not expose generic lists", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.CopyFromIndexComponent.#ctor(Sandcastle.Core.BuildAssembler.IBuildAssembler,System.Collections.Generic.List{System.Lazy{Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentFactory,Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentMetadata}})")]
[assembly: SuppressMessage("Design", "CA1002:Do not expose generic lists", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.SyntaxComponent.#ctor(Sandcastle.Core.BuildAssembler.IBuildAssembler,System.Collections.Generic.List{System.Lazy{Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorFactory,Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata}})")]
[assembly: SuppressMessage("Design", "CA1031:Do not catch general exception types", Justification = "<Pending>", Scope = "member", Target = "~M:Sandcastle.Tools.BuildComponents.TransformComponent.Apply(System.Xml.XmlDocument,System.String)")]
